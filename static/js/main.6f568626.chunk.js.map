{"version":3,"sources":["reference/references.ts","components/todo-form.tsx","actions/todo-actions.ts","components/todo-list.tsx","components/visibility-filters.tsx","actions/visibility-filter-actions.ts","components/todo-app.tsx","reducers/todo-reducer.ts","reducers/rootReducer.ts","reducers/visibility-filter-reducer.ts","index.tsx"],"names":["TODO_ACTIONS","VISIBILITY_FILTER_TYPES","VISIBILITY_FILTER_ACTIONS","mapDispatchToProps","todo_add","text","priority","type","id","shortid","generate","connector","connect","useStyles","makeStyles","theme","createStyles","root","flexGrow","props","console","log","classes","React","textFieldValid","setTextFieldValid","textFieldValue","setTextFieldValue","pristine","setPristine","priorityFieldValue","setPriorityFieldValue","className","style","marginTop","marginBottom","noValidate","autoComplete","Grid","container","spacing","item","xs","TextField","label","onChange","event","valid","target","value","test","error","helperText","fullWidth","IconButton","color","disabled","aria-label","onClick","todo_toggle","todo_update","todo_delete","state","todoList","todo_reducer","slice","visibilityFilter","visibility_filter_reducer","computeVisible","isCompleted","table","tableLayout","width","display","todoPriority","fontSize","Divider","TableContainer","component","Paper","Table","size","TableBody","length","map","todo","TableRow","key","TableCell","scope","Select","labelId","MenuItem","align","visibility_action_set","filter","margin","isDisabled","myVisibilityFilter","propVisibilityFilter","Button","variant","menuButton","marginRight","title","TodoApp","AppBar","position","Toolbar","Typography","seedTodoList","rootReducer","combineReducers","action","store","createStore","Root","render","document","getElementById"],"mappings":"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","file":"static/js/main.6f568626.chunk.js","sourcesContent":["export const TODO_ACTIONS = {\n    CREATE: 'CREATE',\n    TOGGLE: 'TOGGLE',\n    UPDATE: 'UPDATE',\n    DELETE: 'DELETE'\n}\n\nexport const VISIBILITY_FILTER_TYPES = {\n    ALL: 'all',\n    OPEN: 'open',\n    DONE: 'done'\n}\n\nexport const VISIBILITY_FILTER_ACTIONS = {\n    SET: 'SET'\n}\n","// Import dependencies\nimport * as React from 'react';\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport { IconButton, Grid, TextField } from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n\n// Import interfaces\nimport { todo_add } from '../actions/todo-actions';\nimport { connect, ConnectedProps } from 'react-redux';\n\ntype PropsFromRedux = ConnectedProps<typeof connector>\ninterface Props extends PropsFromRedux {\n}\n\nconst mapStateToProps = null;\n\nconst mapDispatchToProps = {\n\ttodo_add: (text: string, priority: string) => todo_add(text, priority)\n}\n\nconst connector = connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)\n\nconst useStyles = makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\troot: {\n\t\t\tflexGrow: 1,\n\t\t},\n\t}),\n);\n\n// Todo form component\nconst TodoForm = (props: Props) => {\n\tconsole.log('TodoForm: Loading the app')\n\tconst classes = useStyles();\n\tconst [textFieldValid, setTextFieldValid] = React.useState(true);\n\tconst [textFieldValue, setTextFieldValue] = React.useState(\"\");\n\tconst [pristine, setPristine] = React.useState(true);\n\tconst [priorityFieldValue, setPriorityFieldValue] = React.useState('LOW');\n\tconst handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tlet valid = true;\n\t\tsetPristine(false);\n\t\tsetTextFieldValue(event.target.value);\n\t\t\n\t\t// If its length is zero\n\t\tif (event.target.value === \"\") {\n\t\t\t// its state is not valid\n\t\t\tvalid = !valid;\n\t\t} else {\n\t\t\t// when the field has been touched and it has one or more characters\n\t\t\t// At leat one of these characters must be non blank\n\t\t\tvalid = /.*\\S.*/.test(event.target.value);\n\t\t}\n\t\t// console.log(\"value: \" + event.target.value);\n\t\t// console.log(\"value length: \" + event.target.value.length);\n\t\t// console.log(\"valid: \" + valid);\n\t\tsetTextFieldValid(valid);\n\t};\n\tconst saveNewTodo = () => {\n\t\tconsole.log(\"Saving new todo: \" + textFieldValue);\n\t\tsetTextFieldValue(\"\");\n\t\tsetPristine(true);\n\t\tsetPriorityFieldValue('LOW')\n\t\tprops.todo_add(textFieldValue, priorityFieldValue);\n\t};\n\treturn (\n\t\t<div className={classes.root} style={{marginTop: '10px', marginBottom: '10px'}}>\n\t\t\t<form noValidate autoComplete=\"off\">\n\t\t\t\t<div>\n\t\t\t\t\t<Grid container className={classes.root} spacing={1}>\n\t\t\t\t\t\t<Grid item xs={11}>\n\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\tid=\"outlined-basic\"\n\t\t\t\t\t\t\t\tlabel=\"Enter todo item\"\n\t\t\t\t\t\t\t\tonChange={handleChange}\n\t\t\t\t\t\t\t\terror={!textFieldValid}\n\t\t\t\t\t\t\t\thelperText={\n\t\t\t\t\t\t\t\t\ttextFieldValid\n\t\t\t\t\t\t\t\t\t\t? \"Enter the new todo text and click Save\"\n\t\t\t\t\t\t\t\t\t\t: \"Todo text must have at least one non-blank character\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tvalue={textFieldValue}\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={1}>\n\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\tcolor=\"primary\"\n\t\t\t\t\t\t\t\tdisabled={pristine || !textFieldValid}\n\t\t\t\t\t\t\t\taria-label=\"directions\"\n\t\t\t\t\t\t\t\tonClick={saveNewTodo}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<SaveIcon />\n\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t</div>\n\t\t\t</form>\n\t\t</div>\n\t)\n}\n\nexport default connector(TodoForm)\n","import shortid from 'shortid';\n\nimport { TODO_ACTIONS } from '../reference/references';\nimport { TodoActionInterface } from '../interfaces/interfaces';\n// import {getPriority} from \"os\";\n\nexport const todo_add = (text: string, priority: string): TodoActionInterface => ({\n\ttype: TODO_ACTIONS.CREATE,\n\tid: shortid.generate(),\n\ttext: text,\n\tpriority: priority\n})\n\nexport const todo_toggle = (id: string): TodoActionInterface => ({\n\ttype: TODO_ACTIONS.TOGGLE,\n\tid: id,\n\ttext: 'ignore',\n\tpriority: 'ignore'\n})\nexport const todo_update = (id: string, text: string, priority: string): TodoActionInterface => ({\n\ttype: TODO_ACTIONS.UPDATE,\n\tid: id,\n\ttext: text,\n\tpriority: priority\n})\nexport const todo_delete = (id: string): TodoActionInterface => ({\n\ttype: TODO_ACTIONS.DELETE,\n\tid: id,\n\ttext: 'ignore',\n\tpriority: 'ignore'\n})\n","// External dependencies\nimport * as React from 'react'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\n// import TableHead from '@material-ui/core/TableHead';\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n// Internal dependencies\nimport { RootState } from '../reducers/rootReducer'\nimport {connect} from 'react-redux';\n// import TodoItem from './todo-item'\nimport { TodoInterface } from \"../interfaces/interfaces\";\nimport {todo_delete, todo_toggle, todo_update} from \"../actions/todo-actions\";\n\n/*\n * *****************************************************************************\n * This is the heart of the component\n * *****************************************************************************\n */\n\n// Comment out if not used\n// interface OwnProps {\n// }\n\n// Set to null if not used\nfunction mapStateToProps (state: RootState) {\n\treturn {\n\t\ttodoList: state.todo_reducer.slice(0),\n\t\tvisibilityFilter: state.visibility_filter_reducer\n\t};\n}\n\n// Set to null if not used\nconst mapDispatchToProps = {\n\ttodo_toggle: (id: string) => todo_toggle(id),\n\ttodo_update: (id: string, text: string, priority: string) => todo_update(id, text, priority),\n\ttodo_delete: (text: string) => todo_delete(text)\n}\n\n// Hook them up; note that the static typing is constrained to what is in use\nconst connector = connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps\ntype Props = StateProps & DispatchProps\n// type Props = StateProps & DispatchProps & OwnProps;\n\n/*\n * *****************************************************************************\n * End of the heart of the component\n * *****************************************************************************\n */\n\nfunction computeVisible (visibilityFilter: string, isCompleted: boolean ): string {\n\tconsole.log('TodoList/computeVisible visibilityFilter: ' + visibilityFilter)\n    let className = 'show-todo-item';\n    if ((visibilityFilter === 'open' && isCompleted) || (visibilityFilter === 'done' && !isCompleted)) {\n        className = 'hide-todo-item';\n    }\n    return className;\n}\n\nconst useStyles = makeStyles({\n\ttable: {\n\t\t/* minWidth: 650, */\n\t\ttableLayout: \"auto\",\n\t\twidth: \"100%\",\n\t\t'& .hide-todo-item': {\n\t\t\tdisplay: 'none',\n\t\t},\n\t},\n\ttodoPriority: {\n\t\tfontSize: \"0.75rem\",\n\t}\n});\n\nconst computeState = (isCompleted: boolean) => {\n\treturn isCompleted ? (\n\t\t<span className=\"todo-item-state todo-item-checked\">✔</span>\n\t) : (\n\t\t<span className=\"todo-item-state todo-item-unchecked\" />\n\t);\n};\n\n// TodoList component\nconst TodoList = (props: Props) => {\n\tconst classes = useStyles();\n\t\n\treturn (\n\t\t<div>\n\t\t\t<Divider />\n\t\t\t<TableContainer component={Paper}>\n\t\t\t\t<Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tprops.todoList.length > 0\n\t\t\t\t\t\t\t?\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\tprops.todoList.map((todo: TodoInterface) => (\n\t\t\t\t\t\t\t\t<TableRow key={todo.id} className={computeVisible(props.visibilityFilter, todo.isCompleted)}>\n\t\t\t\t\t\t\t\t\t<TableCell\n\t\t\t\t\t\t\t\t\t\tcomponent=\"th\"\n\t\t\t\t\t\t\t\t\t\tscope=\"row\"\n\t\t\t\t\t\t\t\t\t\tclassName={\"todo-is-completed\"}\n\t\t\t\t\t\t\t\t\t\tonClick={() => props.todo_toggle(todo.id)}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{computeState(todo.isCompleted)}\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell className={\"todo-item\"}>\n\t\t\t\t\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\t\t\t\tid=\"standard-basic\"\n\t\t\t\t\t\t\t\t\t\tvalue={todo.text}\n\t\t\t\t\t\t\t\t\t\tonChange={() => props.todo_update(todo.id, todo.text, todo.priority)}\n\t\t\t\t\t\t\t\t\t\tfullWidth />\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell className={\"todo-item\"}>\n\t\t\t\t\t\t\t\t\t\t<Select className={classes.todoPriority}\n\t\t\t\t\t\t\t\t\t\t\tlabelId=\"demo-simple-select-label\"\n\t\t\t\t\t\t\t\t\t\t\tid=\"demo-simple-select\"\n\t\t\t\t\t\t\t\t\t\t\tvalue={todo.priority}\n\t\t\t\t\t\t\t\t\t\t\tonChange={(event: React.ChangeEvent<{ value: unknown }>) => props.todo_update(todo.id, todo.text, event.target.value as string)}\n\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={'LOW'}>LOW</MenuItem>\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={'MEDIUM'}>MEDIUM</MenuItem>\n\t\t\t\t\t\t\t\t\t\t\t<MenuItem value={'HIGH'}>HIGH</MenuItem>\n\t\t\t\t\t\t\t\t\t\t</Select>\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t<TableCell align=\"right\" className={\"todo-delete-me\"}>\n\t\t\t\t\t\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\t\t\t\t\t\taria-label=\"delete\"\n\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => props.todo_delete(todo.id)}\n\t\t\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t\t<DeleteIcon fontSize=\"small\" />\n\t\t\t\t\t\t\t\t\t\t</IconButton>\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t(\n\t\t\t\t\t\t\t\t<TableRow key='NONE'>\n\t\t\t\t\t\t\t\t\t{/*<TableCell component=\"th\" scope=\"row\" className={\"todo-is- completed\"}> </TableCell>*/}\n\t\t\t\t\t\t\t\t\t<TableCell className={\"todo-item\"} align={'center'}>\n\t\t\t\t\t\t\t\t\t\t<div>You are done</div>\n\t\t\t\t\t\t\t\t\t</TableCell>\n\t\t\t\t\t\t\t\t\t{/*<TableCell align=\"right\" className={\"todo-delete-me\"}> </TableCell>*/}\n\t\t\t\t\t\t\t\t</TableRow>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t</div>\n\t)\n}\n\nexport default connector(TodoList)\n","// Import external dependencies\nimport * as React from 'react';\nimport {connect} from 'react-redux';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\n// Import internal dependencies\nimport {RootState} from \"../reducers/rootReducer\";\nimport { VISIBILITY_FILTER_TYPES } from '../reference/references';\nimport { visibility_action_set } from \"../actions/visibility-filter-actions\";\n\n/*\n * *****************************************************************************\n * Start of the heart of the component\n * *****************************************************************************\n */\n// interface OwnProps {\n// }\n\nfunction mapStateToProps (state: RootState) {\n\treturn {\n\t\tvisibilityFilter: state.visibility_filter_reducer\n\t};\n}\n\nconst mapDispatchToProps = {\n\tvisibility_action_set: (filter: string) => visibility_action_set(filter)\n}\n\nconst connector = connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n// type Props = StateProps & DispatchProps & OwnProps;\ntype Props = StateProps & DispatchProps;\n/*\n * *****************************************************************************\n * End of heart of the component\n * *****************************************************************************\n */\n\n/*\n * *****************************************************************************\n * Styling\n * *****************************************************************************\n */\nconst useStyles = makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\troot: {\n\t\t\t'& > *': {\n\t\t\t\tmargin: theme.spacing(1),\n\t\t\t},\n\t\t\t'& .all-todo-items': {\n\t\t\t\tcolor: 'orange',\n\t\t\t},\n\t\t\t'& .open-todo-items': {\n\t\t\t\tcolor: 'red',\n\t\t\t},\n\t\t\t'& .done-todo-items': {\n\t\t\t\tcolor: 'green',\n\t\t\t}\n\t\t},\n\t}),\n);\n\n// Local methods\nfunction isDisabled (myVisibilityFilter: string, propVisibilityFilter: string ): boolean {\n    return myVisibilityFilter === propVisibilityFilter;\n}\n\n// VisibilityFilter component\nconst VisibilityFilters = (props: Props) => {\n\tconst classes = useStyles();\n  return (\n    <div className={classes.root}>\n        <span>Show: </span>\n\t\t<Button\n\t\t\tvariant=\"outlined\"\n\t\t\tclassName={'all-todo-items'}\n\t\t\tdisabled={isDisabled(VISIBILITY_FILTER_TYPES.ALL, props.visibilityFilter)}\n\t\t\tonClick={() => props.visibility_action_set(VISIBILITY_FILTER_TYPES.ALL)}>{VISIBILITY_FILTER_TYPES.ALL}\n\t\t</Button>\n\t\t<Button\n\t\t\tvariant=\"outlined\"\n\t\t\tclassName={'open-todo-items'}\n\t\t\tdisabled={isDisabled(VISIBILITY_FILTER_TYPES.OPEN, props.visibilityFilter)}\n\t\t\tonClick={() => props.visibility_action_set(VISIBILITY_FILTER_TYPES.OPEN)}>{VISIBILITY_FILTER_TYPES.OPEN}\n\t\t</Button>\n\t\t<Button\n\t\t\tvariant=\"outlined\"\n\t\t\tclassName={'done-todo-items'}\n\t\t\tdisabled={isDisabled(VISIBILITY_FILTER_TYPES.DONE, props.visibilityFilter)}\n\t\t\tonClick={() => props.visibility_action_set(VISIBILITY_FILTER_TYPES.DONE)}>{VISIBILITY_FILTER_TYPES.DONE}\n\t\t</Button>\n    </div>\n  )\n}\nexport default connector(VisibilityFilters)\n","import { VISIBILITY_FILTER_ACTIONS } from '../reference/references';\nimport { VisibilityFilterActionInterface } from '../interfaces/interfaces';\n\nexport const visibility_action_set = (filter: string): VisibilityFilterActionInterface => ({\n  type: VISIBILITY_FILTER_ACTIONS.SET,\n  filter: filter\n})\n","// External Dependencies\nimport * as React from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\n\n\n// Internal Dependencies\nimport TodoForm from \"./todo-form\";\nimport TodoList from \"./todo-list\";\nimport VisibilityFilters from \"./visibility-filters\";\nimport \"../styles/styles.css\";\n\n// import classes from \"*.module.scss\";\nconst useStyles = makeStyles((theme) => ({\n\troot: {\n\t\tflexGrow: 1,\n\t},\n\tmenuButton: {\n\t\tmarginRight: theme.spacing(2),\n\t},\n\ttitle: {\n\t\tflexGrow: 1,\n\t},\n}));\n\nconst TodoApp = () => {\n\tconsole.log('TodoApp: Loading the app')\n\tconst classes = useStyles();\n\treturn (\n\t\t<div className=\"todo-list-app\">\n\t\t\t{/* <h1 className=\"todo-header\">todo</h1>*/}\n\t\t\t<div className={classes.root}>\n\t\t\t\t<AppBar position=\"static\">\n\t\t\t\t\t<Toolbar>\n\t\t\t\t\t\t<Typography variant=\"h5\" className={classes.title}>\n\t\t\t\t\t\t\tReact Redux TS Material UI Todo List\n\t\t\t\t\t\t</Typography>\n\t\t\t\t\t</Toolbar>\n\t\t\t\t</AppBar>\n\t\t\t</div>\n\t\t\t<TodoForm />\n\t\t\t<TodoList\n\t\t\t\t// todoList={todoList}\n\t\t\t\t// visibilityFilter={visibilityFilter}\n\t\t\t/>\n\t\t\t<VisibilityFilters />\n\t\t</div>\n\t)\n}\nexport default TodoApp\n","import { TODO_ACTIONS } from '../reference/references';\nimport { TodoActionInterface } from '../interfaces/interfaces';\nimport { TodoInterface } from '../interfaces/interfaces';\nimport shortid from \"shortid\";\n\nconst seedTodoList:TodoInterface[] = [\n\t{id: shortid.generate(), text: 'Learn Scala', isCompleted: false, priority: \"LOW\"},\n\t{id: shortid.generate(), text: 'Learn Akka', isCompleted: true, priority: \"LOW\"},\n\t{id: shortid.generate(), text: 'Learn MUI Styles', isCompleted: false, priority: \"LOW\"}\n];\n\nexport const todo_reducer = (state: TodoInterface[] = seedTodoList, action: TodoActionInterface): TodoInterface[] => {\n    switch (action.type) {\n        case TODO_ACTIONS.CREATE:\n            const todo: TodoInterface =     {\n                    id: action.id,\n                    text: action.text,\n                    isCompleted: false,\n\t\t\t\t\tpriority: action.priority\n                }\n            return [...state,todo];\n        case TODO_ACTIONS.TOGGLE:\n            return state.map((todo: TodoInterface) =>\n                (todo.id === action.id)\n                    ? {...todo, isCompleted: !todo.isCompleted}\n                    : todo\n            )\n        case TODO_ACTIONS.UPDATE:\n        return state.map((todo: TodoInterface) =>\n                (todo.id === action.id)\n                    ? {...todo, text: action.text, priority: action.priority}\n                    : todo\n            )\n        case TODO_ACTIONS.DELETE:\n            return state.filter((todo: TodoInterface) => todo.id !== action.id)\n        default:\n            return state;\n    }\n}\n","import { combineReducers } from 'redux'\nimport { todo_reducer } from './todo-reducer'\nimport { visibility_filter_reducer } from './visibility-filter-reducer'\n\nexport const rootReducer = combineReducers({\n\ttodo_reducer,\n\tvisibility_filter_reducer\n})\n\nexport type RootState = ReturnType<typeof rootReducer>\n","import { VISIBILITY_FILTER_ACTIONS, VISIBILITY_FILTER_TYPES } from '../reference/references';\nimport { VisibilityFilterActionInterface } from '../interfaces/interfaces';\n\nexport const visibility_filter_reducer = (state = VISIBILITY_FILTER_TYPES.ALL, action: VisibilityFilterActionInterface): string => {\n    switch (action.type) {\n        case VISIBILITY_FILTER_ACTIONS.SET:\n            return action.filter;\n        default:\n            return state;\n    }\n}\n","// External Dependencies\nimport * as React from \"react\";\nimport { render } from \"react-dom\";\nimport {Provider} from \"react-redux\";\nimport {createStore} from \"redux\";\n\n// Internal Dependencies\nimport TodoApp from \"./components/todo-app\";\nimport {rootReducer} from \"./reducers/rootReducer\";\n\nconst store = createStore(rootReducer)\n\nconst Root = () => (\n\t<Provider store={store}>\n\t\t<TodoApp\n\t\t/>\n\t</Provider>\n);\n\nrender(<Root />, document.getElementById(\"root\"));\n"],"sourceRoot":""}